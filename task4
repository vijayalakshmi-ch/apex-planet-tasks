Task 4: Full Project Implementation üèóÔ∏è
Action: Enhance a to-do list app so tasks are saved and retrieved using localStorage.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Internship Full Project</title>
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body { font-family: "Poppins", sans-serif; background: #f3f4f6; color: #333; }

    nav {
      background: linear-gradient(135deg, #5b86e5, #36d1dc);
      display: flex; justify-content: space-between; align-items: center;
      padding: 1rem 2rem; color: white;
    }
    nav a { color: white; text-decoration: none; margin: 0 1rem; font-weight: 500; }
    nav a:hover { text-decoration: underline; }

    .container { padding: 2rem; max-width: 1000px; margin: auto; }

    section { display: none; animation: fade 0.5s ease-in-out; }
    section.active { display: block; }
    @keyframes fade { from {opacity: 0;} to {opacity: 1;} }

    h1,h2 { color: #5b86e5; margin-bottom: 1rem; }

    /* HOME */
    #home img { width: 100%; border-radius: 12px; margin: 1rem 0; }
    .btn { background: #5b86e5; color: white; border: none; border-radius: 6px; padding: 0.6rem 1.2rem; cursor: pointer; transition: 0.3s; }
    .btn:hover { background: #36d1dc; }

    /* FORM */
    form { display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;
           background: white; padding: 1.5rem; border-radius: 10px;
           box-shadow: 0 4px 10px rgba(0,0,0,0.1); }
    label { font-weight: 600; }
    input,select { width: 100%; padding: 0.6rem; border: 1px solid #ccc; border-radius: 6px; }
    .full { grid-column: span 2; }
    .error { color: red; font-size: 0.8rem; }

    /* QUIZ */
    .quiz { background: #fff; padding: 2rem; border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1); text-align: center; }
    .option { margin: 0.4rem 0; background: #f2f2f2; padding: 0.6rem;
              border-radius: 6px; cursor: pointer; }
    .option.correct { background: #d4edda; }
    .option.wrong { background: #f8d7da; }

    /* TODO LIST */
    #todoList { background: #fff; padding: 1.5rem; border-radius: 10px;
                box-shadow: 0 4px 10px rgba(0,0,0,0.1); }
    #newTask { width: 70%; padding: 0.6rem; border: 1px solid #ccc; border-radius: 6px; }
    #addTaskBtn { background: #5b86e5; color: white; padding: 0.6rem 1.2rem; border: none; border-radius: 6px; cursor: pointer; }
    #tasks { list-style: none; margin-top: 1rem; }
    #tasks li {
      display: flex; justify-content: space-between; align-items: center;
      background: #f8f9fa; padding: 0.6rem 0.8rem; margin-bottom: 0.5rem;
      border-radius: 6px;
    }
    .task-buttons button {
      background: none; border: none; cursor: pointer; font-weight: bold; color: #5b86e5;
    }
    .task-buttons button:hover { color: #36d1dc; }

    @media(max-width:768px) {
      form { grid-template-columns: 1fr; }
      .full { grid-column: span 1; }
      #newTask { width: 100%; margin-bottom: 0.5rem; }
    }
  </style>
</head>
<body>
  <nav>
    <strong>Internship Project</strong>
    <div>
      <a href="#" onclick="showSection('home')">Home</a>
      <a href="#" onclick="showSection('register')">Register</a>
      <a href="#" onclick="showSection('quiz')">Quiz</a>
      <a href="#" onclick="showSection('todo')">To-Do List</a>
    </div>
  </nav>

  <div class="container">

    <!-- HOME -->
    <section id="home" class="active">
      <h1>Welcome to Web Development Internship</h1>
      <p>This mini website demonstrates everything you learned ‚Äî from <strong>basic web development</strong> to <strong>advanced JavaScript and local storage</strong>.</p>
      <img src="https://images.unsplash.com/photo-1522202176988-66273c2fd55f" alt="Web Development">
      <button class="btn" onclick="showSection('register')">Start Registration</button>
    </section>

    <!-- REGISTER -->
    <section id="register">
      <h2>Student Registration</h2>
      <form id="registerForm" novalidate>
        <div>
          <label for="fname">First Name</label>
          <input type="text" id="fname" required>
          <div class="error" id="fnameError"></div>
        </div>
        <div>
          <label for="lname">Last Name</label>
          <input type="text" id="lname" required>
          <div class="error" id="lnameError"></div>
        </div>
        <div>
          <label for="email">Email</label>
          <input type="email" id="email" required>
          <div class="error" id="emailError"></div>
        </div>
        <div>
          <label for="course">Preferred Course</label>
          <select id="course" required>
            <option value="">Select</option>
            <option value="frontend">Frontend Development</option>
            <option value="backend">Backend Development</option>
            <option value="fullstack">Full Stack Development</option>
          </select>
          <div class="error" id="courseError"></div>
        </div>
        <div class="full">
          <button type="submit" class="btn">Submit</button>
        </div>
      </form>
    </section>

    <!-- QUIZ -->
    <section id="quiz">
      <div class="quiz" id="quizBox">
        <h2>Quick JavaScript Quiz</h2>
        <div id="question"></div>
        <div id="options"></div>
        <button class="btn" id="nextBtn">Next</button>
        <div id="score"></div>
      </div>
    </section>

    <!-- TO-DO LIST -->
    <section id="todo">
      <h2>My To-Do List</h2>
      <div id="todoList">
        <input type="text" id="newTask" placeholder="Enter a new task..." />
        <button id="addTaskBtn">Add Task</button>
        <ul id="tasks"></ul>
      </div>
    </section>

  </div>

  <script>
    /* ===== Navigation ===== */
    function showSection(id) {
      document.querySelectorAll("section").forEach(sec => sec.classList.remove("active"));
      document.getElementById(id).classList.add("active");
    }

    /* ===== Registration Form ===== */
    const form = document.getElementById("registerForm");
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const fname = document.getElementById("fname").value.trim();
      const lname = document.getElementById("lname").value.trim();
      const email = document.getElementById("email").value.trim();
      const course = document.getElementById("course").value.trim();

      let valid = true;
      document.querySelectorAll(".error").forEach(el => el.textContent = "");
      if (!fname) { document.getElementById("fnameError").textContent = "Required"; valid = false; }
      if (!lname) { document.getElementById("lnameError").textContent = "Required"; valid = false; }
      if (!email.includes("@")) { document.getElementById("emailError").textContent = "Invalid email"; valid = false; }
      if (!course) { document.getElementById("courseError").textContent = "Select a course"; valid = false; }

      if (valid) {
        const student = { fname, lname, email, course };
        localStorage.setItem("studentData", JSON.stringify(student));
        alert("‚úÖ Registration saved!");
        showSection('quiz');
      }
    });

    /* ===== Quiz ===== */
    const quizData = [
      { q: "What does HTML stand for?", opts: ["HyperText Markup Language","Hyperlink Transfer Mode","Home Tool Markup Language"], ans: 0 },
      { q: "Which CSS property changes text color?", opts: ["font-color","color","text-color"], ans: 1 },
      { q: "Which is used for comments in JS?", opts: ["//","<!-- -->","##"], ans: 0 }
    ];
    let current = 0, score = 0;
    const questionEl = document.getElementById("question");
    const optionsEl = document.getElementById("options");
    const nextBtn = document.getElementById("nextBtn");
    const scoreEl = document.getElementById("score");

    function loadQuestion() {
      const q = quizData[current];
      questionEl.textContent = q.q;
      optionsEl.innerHTML = "";
      q.opts.forEach((opt, i) => {
        const div = document.createElement("div");
        div.classList.add("option");
        div.textContent = opt;
        div.onclick = () => selectOption(i);
        optionsEl.appendChild(div);
      });
      nextBtn.style.display = "none";
      scoreEl.textContent = "";
    }

    function selectOption(i) {
      const q = quizData[current];
      const opts = document.querySelectorAll(".option");
      opts.forEach(o => o.style.pointerEvents = "none");
      if (i === q.ans) { opts[i].classList.add("correct"); score++; }
      else { opts[i].classList.add("wrong"); opts[q.ans].classList.add("correct"); }
      nextBtn.style.display = "inline-block";
    }

    nextBtn.addEventListener("click", () => {
      current++;
      if (current < quizData.length) loadQuestion();
      else { questionEl.textContent = "Quiz Completed!"; optionsEl.innerHTML = ""; scoreEl.textContent = `Score: ${score}/${quizData.length}`; nextBtn.style.display = "none"; }
    });
    loadQuestion();

    /* ===== To-Do List ===== */
    const taskInput = document.getElementById("newTask");
    const addTaskBtn = document.getElementById("addTaskBtn");
    const tasksUl = document.getElementById("tasks");
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];

    function renderTasks() {
      tasksUl.innerHTML = "";
      tasks.forEach((t, i) => {
        const li = document.createElement("li");
        li.innerHTML = `
          <span contenteditable="true" onblur="editTask(${i}, this.textContent)">${t}</span>
          <div class="task-buttons">
            <button onclick="deleteTask(${i})">‚ùå</button>
          </div>`;
        tasksUl.appendChild(li);
      });
    }

    addTaskBtn.addEventListener("click", () => {
      const val = taskInput.value.trim();
      if (val) {
        tasks.push(val);
        localStorage.setItem("tasks", JSON.stringify(tasks));
        taskInput.value = "";
        renderTasks();
      }
    });

    function deleteTask(index) {
      tasks.splice(index, 1);
      localStorage.setItem("tasks", JSON.stringify(tasks));
      renderTasks();
    }

    function editTask(index, newVal) {
      tasks[index] = newVal.trim();
      localStorage.setItem("tasks", JSON.stringify(tasks));
    }

    renderTasks();
  </script>
</body>
</html>
